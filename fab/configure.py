import os
import time
import update
from pantheon import pantheon
from fabric.api import *

def configure(user):
    """configure the Pantheon system.

    """
    _test_for_previous_run()

    _configure_server()
    _configure_postfix(server)
    server.restart_services()
    _restart_services(server)
    _configure_git_repo()
    _configure_permissions(user)
    _mark_incep(server)

    print('################################')
    print('#   Pantheon Setup Complete!   #')
    print('################################')

def _test_for_previous_run():
    if os.path.exists("/etc/pantheon/incep"):
        abort("Pantheon config has already run. Exiting.")

def _configure_server():
    # Get any new packages.
    local('apt-get -y update', capture=False)
    local('apt-get -y dist-upgrade', capture=False)
    # Update pantheon code, run bcfg2, restart jenkins.
    update.update_pantheon()
    # Create the tunable files.
    local('cp /etc/mercury/templates/tuneables /etc/mercury/server_tuneables')
    local('chmod 755 /etc/mercury/server_tuneables')

def _configure_postfix():
    hostname = local('hostname -i')
    with open('/etc/mailname', 'w') as f:
        f.write(hostname)
    local('/usr/sbin/postconf -e "myhostname = %s"' % hostname)
    local('/usr/sbin/postconf -e "mydomain = %s"' % hostname)
    local('/usr/sbin/postconf -e "mydestination = %s"' % hostname)
    local('/etc/init.d/postfix restart')

def _configure_git_repo():
    if os.path.exists('/var/git/projects'):
        local('rm -rf /var/git/projects')
    local('mkdir -p /var/git/projects')
    local("chmod g+s /var/git/projects")

def _configure_permissions(require_group = None):

        #TODO OSS: expose user selection during installation.
        with open('/etc/sudoers.d/002_pantheon_users', 'w') as f:
            f.write("# This file was generated by PANTHEON.\n")
            f.write("# PLEASE DO NOT EDIT THIS FILE DIRECTLY.\n#\n")
            f.write("# Additional sudoer directives can be added in: " + \
                    "/etc/sudoers.d/003_pantheon_extra\n")
            f.write("\n%" + '%s ALL=(ALL) ALL' % require_group)
        local('chmod 0440 /etc/sudoers.d/002_pantheon_users')

        # Add user to www-data group
        local('usermod -aG %s %s' % (server.web_group, require_group))

        # Make the git repo and www directories writable by the group
        local("chown -R %s:%s /var/git/projects" % (require_group, require_group))
        local("chmod -R g+w /var/git/projects")

        # Make the git repo and www directories writable by the group
        local("chown -R %s:%s /var/www" % (require_group, require_group))
        local("chmod -R g+w /var/www")

        # Set ACLs
        _set_acl(require_group, '/var/www')
        _set_acl(require_group, '/var/git/projects')

def _mark_incep():
    '''Mark incep date. This prevents us from ever running again.'''
    with open('/etc/pantheon/incep', 'w') as f:
        f.write(time.time())

def _set_acl(group, directory):
    """Set up ACLs for a directory."""
    local('setfacl --recursive --remove-all %s' % directory)
    local('setfacl --recursive --no-mask --modify mask:rwx %s' % directory)
    local('setfacl --recursive --no-mask --modify group:%s:rwx %s' % (group,
                                                                 directory))
    local('setfacl --recursive --modify default:mask:rwx %s' % directory)
    local('setfacl --recursive --modify default:group:%s:rwx %s' % (group,
                                                               directory))

