#This is a basic VCL configuration file for varnish.  See the vcl(7)
#man page for details on VCL syntax and semantics.

#PLEASE DON'T EDIT THIS FILE DIRECTLY - SEE /etc/mercury/server_tuneables

#Default backend definition.  Set this to point to your content
#server.

backend default {
.host = "127.0.0.1";
.port = "8080";
.connect_timeout = 600s;
.first_byte_timeout = 600s;
.between_bytes_timeout = 600s;
}

sub vcl_recv {
  ${metadata.Probes['varnish_vcl_recv']}
  // Remove Google Analytics cookies.
  set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(__[a-z]+)=[^;]*", "");

  // Remove a ";" prefix, if present.
  set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
  // Remove empty cookies.
  if (req.http.Cookie ~ "^\s*$$") {
    unset req.http.Cookie;
  }

  // No varnish for install,update.php or cron.php
  if (req.url ~ "install\.php|update\.php|cron\.php") {
    return (pass);      
  }

  // Normalize the Accept-Encoding header
  // as per: http://varnish-cache.org/wiki/FAQ/Compression
  if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$$" || req.url ~ "robots\.txt") {
      # No point in compressing these           
      remove req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    } else {
      # unkown algorithm
      remove req.http.Accept-Encoding;
    }
  }
  
  // Let's have a little grace
  set req.grace = 30s;
}

// Strip any cookies before an image/js/css is inserted into cache.
// Also: future-support for ESI.
sub vcl_fetch {
  if (req.url ~ "\.(png|gif|jpg|swf|css|js)$$") {
    unset beresp.http.set-cookie;
  }
  esi;

  if ( beresp.status == 500) {
    set beresp.grace = 60s;
    restart;
  }

  ${metadata.Probes['varnish_vcl_fetch']}
}

sub vcl_hash {
  if (req.http.Cookie) {
    set req.hash += req.http.Cookie;
  }

  ${metadata.Probes['varnish_vcl_hash']}
}

sub vcl_deliver {
    
    ${metadata.Probes['varnish_vcl_deliver']}    
    return (deliver);     
}

sub vcl_error {
  set obj.http.Content-Type = "text/html; charset=utf-8";

  synthetic {"
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html>
      <head>
        <title>"} obj.status " " obj.response {"</title>
        <style type="text/css">
          #page {width: 400px; padding: 10px; margin: 20px auto; border: 1px solid black; background-color: #FFF;}
          p {margin-left:20px;}
          body {background-color: #DDD; margin: auto;}
        </style>
      </head>
      <body>
        <div id="page">
          <h1>Page Could Not Be Loaded</h1>
          <p>We're very sorry, but the page could not be loaded properly.
             This should be fixed very soon, and we apologize for any inconvenience.</p>
          <hr />
          <h4>Debug Info:</h4>
          <pre>
            Status: "} obj.status {"
            Response: "} obj.response {"
            XID: "} req.xid {"
          </pre>
          <address><a href="http://www.varnish-cache.org/">Varnish</a></address>
        </div>
      </body>
    </html>
  "};

  ${metadata.Probes['varnish_vcl_error']}
  return (deliver);
}
